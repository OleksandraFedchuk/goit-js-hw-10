{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    validateDate();\n  },\n\n};\n\nflatpickr('#datetime-picker' , options);\n\nconst elements = {\n  timer: document.querySelector('.timer'),\n  days : document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes : document.querySelector('span[data-minutes]'),\n  seconds : document.querySelector('span[data-secondrs]'),\n  button: document.querySelector('button[data-start]'),\n  picker: document.querySelector('#datetime-picker'),\n}\n\nlet userSelectedDate = null ; \n\nfunction validateDate(){\n  if (userSelectedDate < Date.now()){\n    iziToast.show({\n      message: \"Please choose a date in the future\",\n      position: \"topCenter\",\n      closeOnEscape: true,\n      closeOnClick: true,\n    });\n    elements.button = true;\n  } else {\n    elements.button = false;\n  }\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerFace({days, hours, minutes, seconds}) {\n  elements.days.textContent = addLeadingZero(days);\n  elements.hours.textContent = addLeadingZero(hours);\n  elements.minutes.textContent = addLeadingZero(minutes);\n  elements.seconds.textContent = addLeadingZero(seconds);\n};\n\nlet countInterval = null; \n\nfunction startCount() {\n  countInterval = setInterval(() => {\nconst delta = userSelectedDate - Date.now() ;\n\nif (delta <= 0){\n  clearInterval(countInterval);\n  updateTimerFace({ days: \"00\", hours: \"00\", seconds: \"00\"});\n  elements.button = true; \n  elements.picker = false;\n  return;\n}\nconst time = convertMs(delta);\nupdateTimerFace(time);\n  }, 1000);\n}\n\nelements.button.addEventListener(\"click\", () => {\nif(!userSelectedDate)\n  return;\n\nif(countInterval){\n  clearInterval(countInterval);\n}\n\nelements.picker = true ;\nelements.button = true;\n\nstartCount();\n  \n});\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["options","selectedDates","validateDate","flatpickr","elements","userSelectedDate","iziToast"],"mappings":"+IAMA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BC,GACD,CAEH,EAEAC,EAAU,mBAAqBH,CAAO,EAEtC,MAAMI,EAAW,CACf,MAAO,SAAS,cAAc,QAAQ,EACtC,KAAO,SAAS,cAAc,iBAAiB,EAC/C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAU,SAAS,cAAc,oBAAoB,EACrD,QAAU,SAAS,cAAc,qBAAqB,EACtD,OAAQ,SAAS,cAAc,oBAAoB,EACnD,OAAQ,SAAS,cAAc,kBAAkB,CACnD,EAEA,IAAIC,EAAmB,KAEvB,SAASH,GAAc,CACjBG,EAAmB,KAAK,OAC1BC,EAAS,KAAK,CACZ,QAAS,qCACT,SAAU,YACV,cAAe,GACf,aAAc,EACpB,CAAK,EACDF,EAAS,OAAS,IAElBA,EAAS,OAAS,EAEtB,CA6CAA,EAAS,OAAO,iBAAiB,QAAS,IAAM,CAahD,CAAC"}